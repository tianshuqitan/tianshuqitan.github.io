import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as e}from"./app-C8Xv8B3I.js";const t={};function l(r,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="gpu-实例化" tabindex="-1"><a class="header-anchor" href="#gpu-实例化"><span>GPU 实例化</span></a></h1><p><a href="https://docs.unity3d.com/2021.3/Documentation/Manual/GPUInstancing.html" target="_blank" rel="noopener noreferrer">原文地址 = UnityManual</a></p><p>GPU instancing 是一种 DrawCall 优化方法，它使用相同的材质在单个绘制调用中渲染网格的多个副本。网格的每个副本称为一个实例。这对于绘制在场景中多次出现的内容很有用，例如树木或灌木。</p><p>GPU 实例化在同一个绘制调用中渲染相同的网格。为了增加变化并减少重复感，每个实例可以有不同的属性，例如 <strong>Color</strong> 或 <strong>Scale</strong>。渲染多个实例的绘制调用在 <a href="https://docs.unity3d.com/cn/current/Manual/FrameDebugger.html" target="_blank" rel="noopener noreferrer">Frame Debugger</a> 中显示为 <strong>Draw Mesh (instanced)</strong>。</p><h2 id="要求和兼容性" tabindex="-1"><a class="header-anchor" href="#要求和兼容性"><span>要求和兼容性</span></a></h2><p>本节包含有关 GPU 实例化的平台、渲染管线和 SRP Batcher 兼容性信息。</p><p><strong>平台兼容性</strong></p><p>GPU 实例化在所有平台上都可用，除了 WebGL 1.0。</p><p><strong>渲染管线兼容性</strong></p><table><thead><tr><th style="text-align:left;"><strong>功能</strong></th><th style="text-align:left;"><strong>内置渲染管线</strong></th><th style="text-align:left;"><strong>通用渲染管线 (URP)</strong></th><th style="text-align:left;"><strong>高清渲染管线 (HDRP)</strong></th><th style="text-align:left;"><strong>自定义可编程渲染管线(SRP)</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>GPU instancing</strong></td><td style="text-align:left;">是</td><td style="text-align:left;">是 (1)</td><td style="text-align:left;">是 (1)</td><td style="text-align:left;">是 (1)</td></tr></tbody></table><blockquote><p>(1) 仅当着色器与 <a href="https://docs.unity3d.com/cn/current/Manual/SRPBatcher.html" target="_blank" rel="noopener noreferrer">SRP Batcher</a> 不兼容时。</p></blockquote><p>GPU 实例化与 <a href="https://docs.unity3d.com/cn/current/Manual/SRPBatcher.html" target="_blank" rel="noopener noreferrer">SRP Batcher</a> 不兼容。<strong>SRP Batcher 优先于 GPU 实例化</strong>。如果 GameObject 与 SRP Batcher 兼容，Unity 会使用 SRP Batcher 来渲染它，而不是 GPU 实例化。有关优化方法优先级的更多信息，请参阅 <a href="https://docs.unity3d.com/cn/current/Manual/optimizing-draw-calls.html#optimization-priority" target="_blank" rel="noopener noreferrer">Optimization priority</a>。</p><p>如果您的项目使用 SRP Batcher 并且您想对 GameObject 使用 GPU 实例化，您可以执行以下操作之一：</p><ul><li>使用 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.DrawMeshInstanced.html" target="_blank" rel="noopener noreferrer">Graphics.DrawMeshInstanced</a>。此 API 绕过 GameObject 的使用，并使用指定的参数直接在屏幕上绘制网格。</li><li>手动移除 SRP Batcher 兼容性。有关如何执行此操作的信息，请参阅 <a href="https://docs.unity3d.com/cn/current/Manual/SRPBatcher.html#intentionally-removing-compatibility" target="_blank" rel="noopener noreferrer">Intentionally removing compatibility</a>。</li></ul><h2 id="使用-gpu-实例化" tabindex="-1"><a class="header-anchor" href="#使用-gpu-实例化"><span>使用 GPU 实例化</span></a></h2><p>Unity 对共享相同网格和材质的 GameObject 使用 GPU 实例化。要对网格和材质进行实例化：</p><ul><li>首先，材质的 <a href="https://docs.unity3d.com/cn/current/Manual/Shaders.html" target="_blank" rel="noopener noreferrer">Shader</a> 必须支持 GPU 实例化。 <ul><li>Unity 的 <a href="https://docs.unity3d.com/cn/current/Manual/shader-StandardShader.html" target="_blank" rel="noopener noreferrer">Standard Shader</a> 支持 GPU 实例化。</li><li>所有 <a href="https://docs.unity3d.com/cn/current/Manual/SL-SurfaceShaders.html" target="_blank" rel="noopener noreferrer">Surface Shaders</a> 也支持。</li><li>要为任何其他着色器添加 GPU 实例化支持，请参阅 <a href="https://docs.unity3d.com/cn/current/Manual/gpu-instancing-shader.html" target="_blank" rel="noopener noreferrer">创建支持 GPU instancing 的着色器</a>。</li></ul></li><li>其次，网格必须来自以下来源(之一)，按行为分组： <ul><li><a href="https://docs.unity3d.com/cn/current/Manual/class-MeshRenderer.html" target="_blank" rel="noopener noreferrer">MeshRenderer</a> 组件或 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.RenderMesh.html" target="_blank" rel="noopener noreferrer">Graphics.RenderMesh</a> 调用。Unity 将这些网格添加到列表中，然后检查哪些网格可以实例化。Unity 不支持 <a href="https://docs.unity3d.com/cn/current/Manual/class-SkinnedMeshRenderer.html" target="_blank" rel="noopener noreferrer">SkinnedMeshRenderers</a> 或附加到与 SRP Batcher 兼容的 GameObject 的 MeshRenderer 组件的 GPU 实例化。</li><li><a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.RenderMeshInstanced.html" target="_blank" rel="noopener noreferrer">Graphics.RenderMeshInstanced</a> 或 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.RenderMeshIndirect.html" target="_blank" rel="noopener noreferrer">Graphics.RenderMeshIndirect</a> 调用。这些方法使用相同的着色器多次渲染相同的网格。对这些方法的每次调用都会发出一个单独的绘制调用。Unity 不会合并这些绘制调用。</li></ul></li></ul><p>要对材质使用 GPU 实例化，请在 Inspector 中选择 <strong>Enable GPU Instancing</strong> 选项。</p><p><img src="https://docs.unity3d.com/cn/current/uploads/Main/enable-gpu-instancing-inspector.png" alt=""></p><blockquote><p>材质 Inspector 中显示的 Enable GPU Instancing 选项。</p></blockquote><h3 id="光照" tabindex="-1"><a class="header-anchor" href="#光照"><span>光照</span></a></h3><p>GPU 实例化支持 Unity 的 <a href="https://docs.unity3d.com/cn/current/Manual/GI-Enlighten.html" target="_blank" rel="noopener noreferrer">Baked Global Illumination system</a>。<code>Unity Standard Shaders</code> 和 <code>Surface Shaders</code> 默认支持 GPU 实例化和 Unity 的 Baked Global Illumination 系统。</p><p>每个 GPU 实例支持以下来源(之一)的全局光照：</p><ul><li>任意数量的 <a href="https://docs.unity3d.com/cn/current/Manual/LightProbes.html" target="_blank" rel="noopener noreferrer">Light Probes</a>。</li><li>一个 <a href="https://docs.unity3d.com/cn/current/Manual/Lightmapping.html" target="_blank" rel="noopener noreferrer">Lightmap</a>。实例可以在 Lightmap 中使用多个图集区域。</li><li>一个 <a href="https://docs.unity3d.com/cn/current/Manual/class-LightProbeProxyVolume.html" target="_blank" rel="noopener noreferrer">Light Probe Proxy Volume</a>(LPPV) 组件。您必须为包含所有实例的空间体积烘焙 LPPV。</li></ul><p>GPU 实例化自动适用于：</p><ul><li>受 Light Probes 影响的动态 <a href="https://docs.unity3d.com/cn/current/Manual/class-MeshRenderer.html" target="_blank" rel="noopener noreferrer">Mesh Renderers</a>。</li><li>烘焙到相同 Lightmap 纹理的静态 Mesh Renderers。在此上下文中，如果 Mesh Renderer 在其 <a href="https://docs.unity3d.com/cn/current/Manual/StaticObjects.html" target="_blank" rel="noopener noreferrer">Static Editor Flags</a> 中包含 <strong>Contribute GI</strong>，则它是静态的。</li></ul><p>要为 <code>Graphics.DrawMeshInstanced</code> 启用 Light Probe 渲染，请将 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Rendering.LightProbeUsage.html" target="_blank" rel="noopener noreferrer">LightProbeUsage</a> 参数设置为 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Rendering.LightProbeUsage.CustomProvided.html" target="_blank" rel="noopener noreferrer">CustomProvided</a> 并提供包含 Probe 数据的 <a href="https://docs.unity3d.com/cn/current/ScriptReference/MaterialPropertyBlock.html" target="_blank" rel="noopener noreferrer">MaterialPropertyBlock</a>。</p><blockquote><p>有关更多信息和代码示例，请参阅 <a href="https://docs.unity3d.com/cn/current/ScriptReference/LightProbes.CalculateInterpolatedLightAndOcclusionProbes.html" target="_blank" rel="noopener noreferrer">LightProbes.CalculateInterpolatedLightAndOcclusionProbes</a>。</p></blockquote><p>或者，您可以将 LPPV 组件引用和 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Rendering.LightProbeUsage.UseProxyVolume.html" target="_blank" rel="noopener noreferrer">LightProbeUsage.UseProxyVolume</a> 传递给 <code>Graphics.DrawMeshInstanced</code>。当您这样做时，所有实例都会对 <a href="https://docs.unity3d.com/cn/current/Manual/LightProbes-TechnicalInformation.html" target="_blank" rel="noopener noreferrer">L0 和 L1 bands</a> 的 Light Probe 数据进行采样。如果要补充 L2 数据和遮挡数据，请使用 <code>MaterialPropertyBlock</code>。</p><blockquote><p>有关更多信息，请参阅 <a href="https://docs.unity3d.com/cn/current/Manual/LightProbes-TechnicalInformation.html" target="_blank" rel="noopener noreferrer">Light Probes: Technical Information</a>。</p></blockquote><h2 id="性能影响" tabindex="-1"><a class="header-anchor" href="#性能影响"><span>性能影响</span></a></h2><p>顶点数量较少的网格无法使用 GPU 实例化高效处理，因为 GPU 无法以充分利用 GPU 资源的方式分配工作。这种处理效率低下会对性能产生不利影响。开始出现效率低下的阈值取决于 GPU，但作为一般规则，<strong>不要对顶点少于 <code>256</code> 个的网格使用 GPU 实例化</strong>。</p><p>如果您想多次渲染顶点数量较少的网格，最佳实践是创建一个包含所有网格信息的单一缓冲区，并使用它来绘制网格。</p><h2 id="创建支持-gpu-实例化的着色器" tabindex="-1"><a class="header-anchor" href="#创建支持-gpu-实例化的着色器"><span>创建支持 GPU 实例化的着色器</span></a></h2><p>本页包含如何向自定义 Unity 着色器添加 GPU 实例化支持的信息。它首先解释自定义 Unity 着色器支持 GPU 实例化所需的着色器关键字、变量和函数。然后包括如何向 Surface shaders 和 vertex/fragment shaders 添加每实例数据的示例。</p><p><strong>渲染管线兼容性</strong></p><table><thead><tr><th style="text-align:left;"><strong>功能</strong></th><th style="text-align:left;"><strong>内置渲染管线</strong></th><th style="text-align:left;"><strong>通用渲染管线 (URP)</strong></th><th style="text-align:left;"><strong>高清渲染管线 (HDRP)</strong></th><th style="text-align:left;"><strong>自定义可编程渲染管线(SRP)</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Custom GPU instanced shaders</strong></td><td style="text-align:left;">是</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td></tr></tbody></table><p><strong>着色器修改</strong></p><table><thead><tr><th style="text-align:left;">添加</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>#pragma multi_compile_instancing</code></td><td style="text-align:left;">生成实例化变体。这对于 fragment 和 vertex shaders 是必需的。对于 Surface Shaders 是可选的。</td></tr><tr><td style="text-align:left;"><code>#pragma instancing_options</code></td><td style="text-align:left;">指定 Unity 用于实例的选项。有关可用选项开关的信息，请参阅 [Instancing_options 开关]。</td></tr><tr><td style="text-align:left;"><code>UNITY_VERTEX_INPUT_INSTANCE_ID</code></td><td style="text-align:left;">在 vertex shader 输入/输出结构中定义实例 ID。要使用此宏，请启用 <code>INSTANCING_ON</code> 着色器关键字。否则，Unity 不会设置实例 ID。 <br> 要访问实例 ID，在 <code>#ifdef INSTANCING_ON</code> 块中使用 <code>vertexInput.instanceID</code>。如果不使用此块，变体将无法编译。</td></tr><tr><td style="text-align:left;"><code>UNITY_INSTANCING_BUFFER_START(bufferName)</code></td><td style="text-align:left;">声明名为 <code>bufferName</code> 的每实例常量缓冲区的开始。将此宏与 <code>UNITY_INSTANCING_BUFFER_END</code> 一起使用，以包装您希望每个实例唯一的属性的声明。使用 <code>UNITY_DEFINE_INSTANCED_PROP</code> 在缓冲区中声明属性。</td></tr><tr><td style="text-align:left;"><code>UNITY_INSTANCING_BUFFER_END(bufferName)</code></td><td style="text-align:left;">声明名为 <code>bufferName</code> 的每实例常量缓冲区的结束。将此宏与 <code>UNITY_INSTANCING_BUFFER_START</code> 一起使用，以包装您希望每个实例唯一的属性的声明。使用 <code>UNITY_DEFINE_INSTANCED_PROP</code> 在缓冲区中声明属性。</td></tr><tr><td style="text-align:left;"><code>UNITY_DEFINE_INSTANCED_PROP(type, propertyName)</code></td><td style="text-align:left;">定义具有指定类型和名称的每实例着色器属性。在下面的示例中，<code>_Color</code> 属性是唯一的。</td></tr><tr><td style="text-align:left;"><code>UNITY_SETUP_INSTANCE_ID(v);</code></td><td style="text-align:left;">允许着色器函数访问实例 ID。对于 vertex shaders，此宏在开头是必需的。对于 fragment shaders，此添加是可选的。有关示例，请参阅 <a href="#vertex-fragment-shader-%E7%A4%BA%E4%BE%8B">Vertex Fragment Shader 示例</a>。</td></tr><tr><td style="text-align:left;"><code>UNITY_TRANSFER_INSTANCE_ID(v, o);</code></td><td style="text-align:left;">将实例 ID 从输入结构复制到 vertex shader 中的输出结构。如果您需要在 fragment shader 中访问每实例数据，请使用此宏。</td></tr><tr><td style="text-align:left;"><code>UNITY_ACCESS_INSTANCED_PROP(bufferName, propertyName)</code></td><td style="text-align:left;">访问实例化常量缓冲区中的每实例着色器属性。Unity 使用实例 ID 索引到实例数据数组。<code>bufferName</code> 必须与包含指定属性的常量缓冲区的名称匹配。此宏为 <code>INSTANCING_ON</code> 和非实例化变体编译不同。</td></tr></tbody></table><p>当您使用多个每实例属性时，不需要在 <code>MaterialPropertyBlock</code> 对象中填充所有属性。此外，如果一个实例缺少属性，Unity 会从引用的材质中获取默认值。如果材质没有该属性的默认值，Unity 会将值设置为 0。不要将非实例化属性放在 <code>MaterialPropertyBlock</code> 中，因为这会禁用实例化。相反，为它们创建不同的材质。</p><p><strong>Instancing_options</strong></p><p><code>#pragma instancing_options</code> 指令可以使用以下开关：</p><table><thead><tr><th style="text-align:left;"><strong>开关</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>forcemaxcount:batchSize</code> 和 <code>maxcount:batchSize</code></td><td style="text-align:left;">在大多数平台上，Unity 会自动计算实例化数据数组大小。它将目标设备上的最大常量缓冲区大小除以包含所有每实例属性的结构的大小。通常，您不需要担心批处理大小。但是，某些平台需要固定数组大小。要为这些平台指定批处理大小，请使用 <code>maxcount</code> 选项。其他平台忽略此选项。如果要强制所有平台的批处理大小，请使用 <code>forcemaxcount</code>。例如，当您的项目使用 <code>DrawMeshInstanced</code> 发出带有 <code>256</code> 个实例化精灵的绘制调用时，这很有用。这两个选项的默认值为 <code>500</code>。</td></tr><tr><td style="text-align:left;"><code>assumeuniformscaling</code></td><td style="text-align:left;">指示 Unity 假设所有实例都具有统一缩放（X、Y 和 Z 轴的缩放相同）。</td></tr><tr><td style="text-align:left;"><code>nolodfade</code></td><td style="text-align:left;">使 Unity 不将 GPU 实例化应用于 <a href="https://docs.unity3d.com/cn/current/Manual/LevelOfDetail.html" target="_blank" rel="noopener noreferrer">LOD</a> 淡出值。</td></tr><tr><td style="text-align:left;"><code>nolightprobe</code></td><td style="text-align:left;">阻止 Unity 将 GPU 实例化应用于 <a href="https://docs.unity3d.com/cn/current/Manual/LightProbes.html" target="_blank" rel="noopener noreferrer">Light Probe</a> 值及其遮挡数据。如果您的项目不包含同时使用 GPU 实例化和 Light Probes 的 GameObject，将此选项设置为 <code>ON</code> 可以提高性能。</td></tr><tr><td style="text-align:left;"><code>nolightmap</code></td><td style="text-align:left;">阻止 Unity 将 GPU 实例化应用于 lightmap 图集信息值。如果您的项目不包含同时使用 GPU 实例化和 lightmaps 的 GameObject，将此选项设置为 <code>ON</code> 可以提高性能。</td></tr><tr><td style="text-align:left;"><code>procedural:FunctionName</code></td><td style="text-align:left;">生成一个额外的变体以与 <a href="https://docs.unity3d.com/cn/current/Manual/Graphics.DrawMeshInstancedIndirect" target="_blank" rel="noopener noreferrer">Graphics.DrawMeshInstancedIndirect</a> 一起使用。在 vertex shader 阶段开始时，Unity 调用冒号后指定的函数。要手动设置实例数据，请以与通常向着色器添加每实例数据相同的方式向此函数添加每实例数据。如果任何获取的实例属性包含在 fragment shader 中，Unity 也会在 fragment shader 开始时调用此函数。</td></tr></tbody></table><h3 id="使用带有-gpu-实例化的着色器变体" tabindex="-1"><a class="header-anchor" href="#使用带有-gpu-实例化的着色器变体"><span>使用带有 GPU 实例化的着色器变体</span></a></h3><p>默认情况下，Unity 会生成带有实例化 <a href="https://docs.unity3d.com/cn/current/Manual/SL-MultipleProgramVariants.html" target="_blank" rel="noopener noreferrer">variants</a> 的 Surface shaders，除非您在 <code>#pragma</code> 指令中指定 <code>noinstancing</code>。Unity 忽略在 Surface shader 中使用 <code>#pragma multi_compile_instancing</code>。</p><p>Unity 的 Standard 和 StandardSpecular shaders 默认支持实例化，但除了变换之外没有其他每实例属性。</p><p>如果您的场景中没有启用 GPU 实例化的 GameObject，则 Unity 会剥离实例化着色器变体。要覆盖剥离行为：</p><ol><li>打开 Project Settings（菜单：<strong>Edit</strong> &gt; <strong>Project Settings</strong>）。</li><li>转到 <strong>Graphics</strong>。</li><li>在 <strong>Shader Stripping</strong> 部分，将 <strong>Instancing Variants</strong> 设置为 <strong>Keep All</strong>。</li></ol><h3 id="向-gpu-实例化着色器添加每实例属性" tabindex="-1"><a class="header-anchor" href="#向-gpu-实例化着色器添加每实例属性"><span>向 GPU 实例化着色器添加每实例属性</span></a></h3><p>默认情况下，Unity 在每个实例化绘制调用中 GPU 实例化具有不同 <a href="https://docs.unity3d.com/cn/current/Manual/class-Transform.html" target="_blank" rel="noopener noreferrer">Transforms</a> 的 GameObject。要向实例添加更多变化，修改着色器以添加每实例属性，例如颜色。您可以在 Surface shaders 和 vertex/fragment shaders 中执行此操作。</p><p>自定义着色器不需要每实例数据，但它们确实需要一个实例 ID，因为世界矩阵需要一个才能正常工作。Surface shaders 会自动设置实例 ID，但自定义 vertex 和 fragment shaders 不会。要为自定义 vertex 和 fragment shaders 设置 ID，请在着色器开头使用 <code>UNITY_SETUP_INSTANCE_ID</code>。有关如何执行此操作的示例，请参阅 <a href="#vertex-fragment-shader-%E7%A4%BA%E4%BE%8B">Vertex Fragment Shader 示例</a>。</p><p>当您声明实例化属性时，Unity 会从 GameObject 上设置的 <code>MaterialPropertyBlock</code> 对象中收集所有属性值到一个绘制调用中。有关如何使用 <code>MaterialPropertyBlock</code> 对象在运行时设置每实例数据的示例，请参阅 <a href="#changing-per-instanced-data-at-runtime">Changing per-instance data at runtime</a>。</p><p>向多通道着色器添加每实例数据时，请记住以下几点：</p><ul><li>如果多通道着色器有两个以上的通道，Unity 仅实例化第一个通道。这是因为 Unity 会为每个对象一起渲染后面的通道，这会强制材质更改。</li><li>如果您在 Built-in Render Pipeline 中使用 Forward 渲染路径，Unity 无法高效实例化受多个灯光影响的对象。Unity 只能有效地对基础通道使用实例化，而不能对附加通道使用。有关光照通道的更多信息，请参阅有关 <a href="https://docs.unity3d.com/cn/current/Manual/RenderTech-ForwardRendering.html" target="_blank" rel="noopener noreferrer">Forward Rendering and Pass Tags</a> 的文档。</li></ul><h3 id="surface-shader-示例" tabindex="-1"><a class="header-anchor" href="#surface-shader-示例"><span>Surface shader 示例</span></a></h3><p>以下示例演示如何创建具有每个实例不同颜色值的实例化 Surface Shader。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Shader </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Custom/InstancedColorSurfaceShader&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Properties </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _Color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Color&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Color) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _MainTex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Albedo (RGB)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;white&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _Glossiness</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Smoothness&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _Metallic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Metallic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SubShader</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        Tags { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;RenderType&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Opaque&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        LOD </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        CGPROGRAM</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Uses the physically based standard lighting model with shadows enabled for all light types.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        #pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> surface</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> surf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Standard</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> fullforwardshadows</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Use Shader model 3.0 target</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        #pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 3.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sampler2D _MainTex;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            float2 uv_MainTex;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        half _Glossiness;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        half _Metallic;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        UNITY_INSTANCING_BUFFER_START</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">           UNITY_DEFINE_INSTANCED_PROP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fixed4, _Color)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        UNITY_INSTANCING_BUFFER_END</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> surf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Input IN, inout SurfaceOutputStandard o) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            fixed4 c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tex2D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (_MainTex, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uv_MainTex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UNITY_ACCESS_INSTANCED_PROP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props, _Color);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Albedo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rgb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Metallic</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _Metallic;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Smoothness</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _Glossiness;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Alpha</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ENDCG</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FallBack </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Diffuse&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vertex-fragment-shader-示例" tabindex="-1"><a class="header-anchor" href="#vertex-fragment-shader-示例"><span>Vertex Fragment Shader 示例</span></a></h3><p>以下示例演示如何创建具有每个实例不同颜色值的实例化 Vertex 和 Fragment shader。与 Surface shader 不同，创建 Vertex 和 Fragment shader 时必须使用 <code>UNITY_SETUP_INSTANCE_ID</code> 手动设置实例 ID。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Shader </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Custom/SimplestInstancedShader&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Properties</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _Color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Color&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Color) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SubShader</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        Tags { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;RenderType&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Opaque&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        LOD </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        Pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            CGPROGRAM</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            #pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> vertex</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> vert</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            #pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> fragment</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> frag</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            #pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> multi_compile_instancing</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;UnityCG.cginc&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> appdata</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                float4 vertex : POSITION;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                UNITY_VERTEX_INPUT_INSTANCE_ID</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> v2f</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                float4 vertex : SV_POSITION;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使用这个在 fragment shader 中访问实例属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            UNITY_INSTANCING_BUFFER_START</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                UNITY_DEFINE_INSTANCED_PROP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(float4, _Color)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            UNITY_INSTANCING_BUFFER_END</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            v2f </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(appdata v)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                v2f o;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                UNITY_SETUP_INSTANCE_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                UNITY_TRANSFER_INSTANCE_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v, o);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vertex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UnityObjectToClipPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vertex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> o;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            fixed4 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">frag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(v2f i) : SV_Target</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                UNITY_SETUP_INSTANCE_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UNITY_ACCESS_INSTANCED_PROP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Props, _Color);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ENDCG</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行时更改每实例数据示例" tabindex="-1"><a class="header-anchor" href="#运行时更改每实例数据示例"><span>运行时更改每实例数据示例</span></a></h3><p>以下示例演示如何使用 <code>MaterialPropertyBlock</code> 对象在运行时为一组 GameObject 设置每实例数据。它将上述着色器示例中的 <code>_Color</code> 属性设置为随机颜色。</p><p><strong>重要</strong>：<code>MaterialPropertyBlocks</code> 会破坏 SRP Batcher 兼容性。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnityEngine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MaterialPropertyBlockExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MonoBehaviour</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GameObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MaterialPropertyBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> props</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MaterialPropertyBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MeshRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> renderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">GameObject</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            float</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            float</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> g</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            float</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.0f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetColor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_Color&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            renderer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MeshRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            renderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetPropertyBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64)]))}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/Unity/Optimization/GPU%20%E5%AE%9E%E4%BE%8B%E5%8C%96.html","title":"GPU 实例化","lang":"zh-CN","frontmatter":{"source":"https://docs.unity3d.com/2021.3/Documentation/Manual/GPUInstancing.html","article":false,"index":false},"git":{"createdTime":1744972326000,"updatedTime":1747134104000,"contributors":[{"name":"unknown","username":"unknown","email":"chenmengjie@cyou-inc.com","commits":2,"url":"https://github.com/unknown"},{"name":"chenjie","username":"chenjie","email":"1587272470@qq.com","commits":1,"url":"https://github.com/chenjie"}]},"readingTime":{"minutes":11.24,"words":3373},"filePathRelative":"Unity/Optimization/GPU 实例化.md","localizedDate":"2025年4月18日","excerpt":""}');export{d as comp,k as data};
