import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as n,o as t}from"./app-B3jfeM8r.js";const a={};function l(o,s){return t(),e("div",null,s[0]||(s[0]=[n(`<h1 id="程序集" tabindex="-1"><a class="header-anchor" href="#程序集"><span>程序集</span></a></h1><p><a href="https://docs.unity3d.com/2022.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html" target="_blank" rel="noopener noreferrer">原文地址 - UnityManual</a></p><p>你可以创建 <code>Assembly Definitions</code> 和 <code>Assembly References</code> 资产，将你的脚本组织成程序集。</p><p>程序集(assembly)是 C# 代码库，其中包含脚本定义的已编译的类和结构，并且还定义了对其他程序集的引用。有关 C# 中程序集的一般信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/dotnet/standard/assembly/" target="_blank" rel="noopener noreferrer">.NET 中的程序集</a>。</p><p>默认情况下，Unity 会将几乎所有的游戏脚本编译到预定义(Predefined)程序集 <strong>Assembly-CSharp.dll</strong> 中。（除此以外，Unity 还会创建 <a href="https://docs.unity3d.com/2022.3/Documentation/Manual/ScriptCompileOrderFolders.html" target="_blank" rel="noopener noreferrer">几个较小的专用预定义程序集</a>。）</p><blockquote><p><strong>Assembly-CSharp-firstpass</strong>：<code>Standard Assets</code> <code>Pro Standard Assets</code> <code>Plugins</code> 文件夹中的运行时脚本。</p><p><strong>Assembly-CSharp-Editor-firstpass</strong>：<code>Standard Assets</code> <code>Pro Standard Assets</code> 和 <code>Plugins</code> 文件夹中的任意位置的 Editor 文件夹中的编辑器脚本。</p><p><strong>Assembly-CSharp</strong>：除特殊文件夹外，非 Editor 文件夹中的脚本。</p><p><strong>Assembly-CSharp-Editor</strong>：除特殊文件夹外，Editor 文件夹中的脚本。</p></blockquote><p>这种安排对于小型项目来说可以接受，但是随着项目中代码的增多，这会带来一些问题：</p><ul><li>每次你更改一个脚本，Unity 都必须重新编译所有其他脚本，这增加了迭代代码的整体编译时间。</li><li>任何脚本都可以直接访问任何其他脚本中定义的类型，这可能使得重构和改进代码更加困难。</li><li>所有脚本都会被所有平台编译。</li></ul><p>通过定义程序集，可以组织代码以促进模块化和可重用性。自定义程序集中的脚本不再被添加到默认程序集中，并且只能访问指定的其他程序集中的脚本。</p><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/ScriptCompilation.png" alt=""></p><p>上图演示了如何将项目中的代码拆分成多个程序集。因为 <strong>Main</strong> 引用了 <strong>Stuff</strong> 并且没有反向引用，所以对 <strong>Main</strong> 中代码的更改不会影响 <strong>Stuff</strong> 中的代码。同样，因为 <strong>Library</strong> 不依赖于任何其他程序集，你可以更容易地在另一个项目中重用 <strong>Library</strong> 中的代码。</p><h2 id="定义程序集" tabindex="-1"><a class="header-anchor" href="#定义程序集"><span>定义程序集</span></a></h2><p>要将代码组织成程序集，需要为每个程序集创建一个文件夹，并将属于该程序集的脚本移动到文件夹中。然后<a href="#%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89%E8%B5%84%E4%BA%A7">创建程序集定义资产</a>并指定程序集属性。</p><p>Unity 会获取包含<strong>程序集定义资产</strong>的文件夹中的所有脚本，并使用该资产定义的名称和其他设置将它们编译成一个程序集。Unity 还会将所有子文件夹中的脚本包含在同一个程序集中，除非子文件夹有自己的程序集定义或程序集引用资产。</p><p>要将非子文件夹中的脚本包含在程序集中，请在非子文件夹中创建一个程序集引用资产，并将其设置为引用定义目标程序集的程序集定义资产。例如，你可以将项目中所有 Editor 文件夹中的脚本组合到它们自己的程序集中，无论这些文件夹位于何处。</p><blockquote><p>如果你想要访问 Package 中的 Internal 类的话，就可以通过创建程序集引用资产，来引用目标程序集，从而在编译的时候将自己的脚本编译到目标程序集，达到访问 Internal 类的目的。</p></blockquote><p>Unity 按照程序集的依赖关系确定的顺序来编译程序集；你无法指定程序集的编译顺序。</p><h2 id="引用和依赖关系" tabindex="-1"><a class="header-anchor" href="#引用和依赖关系"><span>引用和依赖关系</span></a></h2><p>当一个类型使用另一个类型时，第一个类型 <strong>依赖于</strong> 第二个类型。当 Unity 编译一个脚本时，它必须能够访问该脚本所依赖的任何类型或其他代码。同样，当编译后的代码运行时，它必须能够访问其依赖项的编译版本。如果两个类型位于不同的程序集中，则包含依赖类型的程序集必须声明对包含其所依赖类型的程序集的<strong>引用</strong>。</p><p>你可以使用程序集定义资产的选项来控制程序集之间的引用。设置包括：</p><ul><li><code>Auto Referenced</code> – 预定义(Predefined)程序集(<code>Assembly-CSharp</code>等)是否自动引用该程序集，默认为 True。如果程序集划分合理，可以将该选项设置为 False，需要的时候手动引用。</li><li><code>Assembly Definition References</code> – 手动指定要引用的程序集。</li><li><code>Override References</code> - 如果启用的话，会多一个 <code>Assembly References</code> 选项，可以手动指定要引用的预编译(Precompiled)程序集(Plugin)。如果不启用的话，该程序集会自动引用所有预编译(Precompiled)程序集。</li><li><code>No Engine References</code> - 是否不引用 UnityEngine 程序集。如果程序集不依赖 Unity API 可以将其设置为 True。</li></ul><p><strong>注意：</strong> 使用程序集定义创建的程序集中的类不能使用在预定义(Predefined)程序集中定义的类型。</p><blockquote><p>预编译(Precompiled)程序集：常见于编译为 DLL 的插件，比如某些插件不提供源码，只提供了一个编译好的 DLL。 预定义(Predefined)程序集：Unity 预定义的那几个程序集，包括：<code>Assembly-CSharp-firstpass</code> <code>Assembly-CSharp-Editor-firstpass</code> <code>Assembly-CSharp</code> <code>Assembly-CSharp-Editor</code>。</p></blockquote><h3 id="默认引用" tabindex="-1"><a class="header-anchor" href="#默认引用"><span>默认引用</span></a></h3><p>默认情况下，预定义(Predefined)程序集会引用所有其他程序集，包括使用程序集定义创建的程序集(1) 和作为 Plugins 添加到项目中的预编译程序集(2)。此外，你使用程序集定义资产创建的程序集会自动引用所有预编译程序集(3)：</p><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/AssemblyDependencies.png" alt=""></p><p>在默认设置中，预定义程序集中的类可以使用项目中任何其他程序集定义的所有类型。同样，你使用程序集定义资产创建的程序集可以使用任何预编译程序集中定义的所有类型。</p><p>你可以在程序集定义资产的 Inspector 中关闭 <code>Auto Referenced</code> 来阻止程序集被预定义程序集引用。关闭 <code>Auto Referenced</code> 意味着当你更改程序集中的代码时，预定义程序集不会重新编译，但也意味着预定义程序集不能直接使用此程序集中的代码。</p><blockquote><p>关闭 <code>Auto Referenced</code> 可以加快编译速度，因为自定义程序集发生改变的时候，不再需要编译预定义程序集了。</p></blockquote><p>同样，你可以在 <a href="https://docs.unity3d.com/2022.3/Documentation/Manual/PluginInspector.html" target="_blank" rel="noopener noreferrer">Plugin Inspector</a> 中关闭 <code>Auto Referenced</code> 来阻止 Plugin 程序集被自动引用。这会影响预定义程序集和你使用程序集定义创建的程序集。</p><p>当你为 <strong>Plugin</strong> 关闭 <strong>Auto Referenced</strong> 时，你可以在程序集定义资产的 Inspector 中显式引用它。启用资产的 <code>Override References</code> 选项并添加对 <strong>Plugin</strong> 的引用。</p><p><strong>注意：</strong> 你不能为预编译(Precompiled)程序集声明显式引用。预定义(Predefined)程序集只能使用 <code>Auto Referenced</code> 程序集中的代码。</p><h3 id="循环引用" tabindex="-1"><a class="header-anchor" href="#循环引用"><span>循环引用</span></a></h3><p>当一个程序集引用第二个程序集，而第二个程序集又引用第一个程序集时，就存在程序集循环引用。这种程序集之间的循环引用是不允许的，并会报告错误，消息为：<code>Assembly with cyclic references detected</code>.</p><p>通常，这种程序集之间的循环引用是由于程序集中定义的类内部存在循环引用而发生的。虽然同一程序集中类之间的循环引用在技术上没有问题，但不同程序集中类之间的循环引用是不允许的。如果你遇到循环引用错误，你必须重构你的代码以移除循环引用，或者将相互引用的类放在同一个程序集中。</p><h2 id="创建程序集定义资产" tabindex="-1"><a class="header-anchor" href="#创建程序集定义资产"><span>创建程序集定义资产</span></a></h2><ol><li>在 <strong>Project</strong> 窗口中，找到想要创建程序集的脚本文件夹。</li><li>在该文件夹中创建一个程序集定义资产(菜单: <strong>Assets</strong> &gt; <strong>Create</strong> &gt; <strong>Assembly Definition</strong>)。</li><li>为该资产分配一个名称。默认情况下，程序集文件使用你分配给资产的名称，但你可以在 <strong>Inspector</strong> 窗口中更改名称。</li></ol><p>Unity 会重新编译项目中的脚本以创建新的程序集。完成后，你可以更改新程序集的设置。</p><p>包含程序集定义的文件夹中的脚本，包括任何子文件夹中的脚本（除非这些文件夹包含它们自己的程序集定义或引用资产）都会被编译到新的程序集中，并从它们之前的程序集中移除。</p><h2 id="创建程序集定义引用资产" tabindex="-1"><a class="header-anchor" href="#创建程序集定义引用资产"><span>创建程序集定义引用资产</span></a></h2><ol><li>在 <strong>Project</strong> 窗口中，找到包含你想要包含在被引用程序集中的脚本的文件夹。</li><li>在该文件夹中创建一个程序集定义引用资产(菜单: <strong>Assets</strong> &gt; <strong>Create</strong> &gt; <strong>Assembly Definition Reference</strong>)。</li><li>为资产分配名称。Unity 重新编译项目中的脚本以创建新的程序集。完成后，你可以更改新的程序集定义引用的设置。</li><li>选择新的程序集定义引用资产，在 <strong>Inspector</strong> 中查看其属性。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-2.png" alt=""></p><ol start="5"><li>将 <code>Assembly Definition</code> 属性设置为引用目标程序集定义资产。</li><li>点击 <strong>Apply</strong>。</li></ol><p>包含程序集定义引用资产的文件夹中的脚本，包括任何子文件夹中的脚本（除非这些文件夹包含它们自己的程序集定义或引用资产）都会被编译到被引用的程序集中，并从它们之前的程序集中移除。</p><h2 id="创建特定平台的程序集" tabindex="-1"><a class="header-anchor" href="#创建特定平台的程序集"><span>创建特定平台的程序集</span></a></h2><ol><li><a href="#%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%AE%9A%E4%B9%89%E8%B5%84%E4%BA%A7">创建程序集定义资产</a>。</li><li>选择新的程序集定义资产，在 <strong>Inspector</strong> 中查看其属性。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-3.png" alt=""></p><ol start="3"><li>勾选 <strong>Any Platform</strong> 选项并选择要排除的特定平台。或者，你可以取消勾选 <code>Any Platform</code> 并选择要包含的特定平台。</li><li>点击 <strong>Apply</strong>。</li></ol><p>当你为某个平台构建项目时，该程序集将根据所选平台被包含（或排除）。</p><h2 id="为-editor-代码创建程序集" tabindex="-1"><a class="header-anchor" href="#为-editor-代码创建程序集"><span>为 Editor 代码创建程序集</span></a></h2><p>Editor 程序集允许你将 Editor 脚本放在项目的任何位置，而不仅仅是放在名为 Editor 的顶层文件夹中。</p><blockquote><p>如果你不想把编辑器脚本放在 Editor 文件夹中，又需要在构建的时候排除掉，可以定义 Editor 程序集。</p></blockquote><ol><li>在一个包含 Editor 脚本的文件夹中创建一个特定平台的程序集。</li><li>仅包含 Editor 平台。</li><li>如果你有其他包含 Editor 脚本的文件夹，请在这些文件夹中创建程序集定义引用资产并将它们设置为引用此程序集定义。</li></ol><h2 id="创建测试程序集" tabindex="-1"><a class="header-anchor" href="#创建测试程序集"><span>创建测试程序集</span></a></h2><p>测试程序集允许你编写测试并使用 Unity TestRunner 运行它们，同时将测试代码与应用程序发布代码分开。Unity 提供 TestRunner 作为 <a href="https://docs.unity3d.com/Packages/com.unity.test-framework@1.5/manual/index.html" target="_blank" rel="noopener noreferrer">Test Framework package</a> 的一部分。有关安装 Test Framework package 和创建测试程序集的说明，请参阅 <a href="https://docs.unity3d.com/Packages/com.unity.test-framework@latest?subfolder=/manual/workflow-create-test-assembly.html" target="_blank" rel="noopener noreferrer">Test Framework documentation</a>。</p><h2 id="引用另一个程序集" tabindex="-1"><a class="header-anchor" href="#引用另一个程序集"><span>引用另一个程序集</span></a></h2><p>要使用属于另一个程序集的 C# 类型和函数，必须在程序集定义资产中创建对该程序集的引用。</p><ol><li>选择需要引用的程序集的程序集定义，在 <strong>Inspector</strong> 中查看其属性。</li><li>在 <strong>Assembly Definition References</strong> 部分，点击 <strong>+</strong> 按钮添加一个新的引用。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-4.png" alt=""></p><ol start="3"><li>将程序集定义资产分配给引用列表中新创建的槽位。</li></ol><p>启用 <strong>Use GUIDs</strong> 选项允许你更改被引用的程序集定义资产的文件名，而无需更新其他程序集定义中的引用以反映新名称。（请注意，如果资产文件的元数据文件被删除，或者你在 Unity 编辑器之外移动文件而没有同时移动 meta 文件，则必须重置 GUID。）</p><h2 id="引用预编译的-plugin-程序集" tabindex="-1"><a class="header-anchor" href="#引用预编译的-plugin-程序集"><span>引用预编译的 Plugin 程序集</span></a></h2><p>默认情况下，项目中所有使用程序集定义创建的程序集都会自动引用所有预编译程序集。这些自动引用意味着当你更新任何一个预编译程序集时，Unity 必须重新编译你所有的程序集，即使该程序集中的代码没有被使用。为了避免这种额外的开销，你可以覆盖自动引用，并仅指定该程序集实际使用的预编译库的引用：</p><ol><li>选择需要引用的程序集的程序集定义，在 <strong>Inspector</strong> 中查看其属性。</li><li>在 <strong>General</strong> 部分，启用 <strong>Override References</strong> 选项。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-5.png" alt=""></p><p>当勾选 <strong>Override References</strong> 时，<strong>Inspector</strong> 的 <strong>Assembly References</strong> 部分变为可用。</p><ol start="3"><li><p>在 <strong>Assembly References</strong> 部分，点击 <strong>+</strong> 按钮添加一个新的引用。</p></li><li><p>使用空槽位中的下拉列表分配对预编译程序集的引用。该列表会显示项目中适用于 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/BuildSettings.html" target="_blank" rel="noopener noreferrer">Build Settings</a> 中设置的平台的所有预编译程序集。（在 <a href="https://docs.unity3d.com/2022.3/Documentation/Manual/PluginInspector.html" target="_blank" rel="noopener noreferrer">Plugin Inspector</a> 中为预编译程序集设置平台兼容性。）</p><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-6.png" alt=""></p></li><li><p>点击 <strong>Apply</strong>。</p></li><li><p>为你构建项目的每个平台重复此操作。</p></li></ol><h2 id="有条件地包含程序集" tabindex="-1"><a class="header-anchor" href="#有条件地包含程序集"><span>有条件地包含程序集</span></a></h2><p>你可以使用预处理器符号来控制一个程序集是否被编译并包含在构建中（包括编辑器中的 Play 模式）。你可以使用程序集定义选项中的 <strong>Define Constraints</strong> 列表指定必须定义哪些符号才能使用一个程序集：</p><ol><li>选择该程序集的程序集定义，在 <strong>Inspector</strong> 中查看其属性。</li><li>在 <strong>Define Constraints</strong> 部分，点击 <strong>+</strong> 按钮向约束列表添加一个新符号。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-7.png" alt=""></p><ol start="3"><li>输入符号名称。你可以在名称前加上感叹号来“否定”该符号。例如，约束 <code>!UNITY_WEBGL</code> 表示在未定义 <code>UNITY_WEBGL</code> 时包含该程序集。</li><li>点击 <strong>Apply</strong>。</li></ol><p>你可以使用以下符号作为约束：</p><ul><li>在 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/class-PlayerSettingsStandalone.html#Configuration" target="_blank" rel="noopener noreferrer">Scripting Define Symbols</a> 设置中定义的符号，你可以在 <strong>Project Settings</strong> 的 <strong>Player</strong> 部分找到它。请注意，<strong>Scripting Define Symbols</strong> 适用于 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/BuildSettings.html" target="_blank" rel="noopener noreferrer">Build Settings</a> 中当前设置的平台。要为多个平台定义符号，你必须切换到每个平台并单独修改 <strong>Scripting Define Symbols</strong> 字段。</li><li>Unity 定义的符号。请参阅 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/PlatformDependentCompilation.html" target="_blank" rel="noopener noreferrer">Platform dependent compilation</a>。</li><li>使用程序集定义资产的 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html#define-symbols" target="_blank" rel="noopener noreferrer">Version Defines</a> 部分定义的符号。</li></ul><p>在确定约束是否已满足时，不会考虑脚本中定义的符号。有关其他信息，请参阅 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html#define-constraints" target="_blank" rel="noopener noreferrer">Define Constraints</a>。</p><h2 id="根据-unity-和项目-package-版本定义符号" tabindex="-1"><a class="header-anchor" href="#根据-unity-和项目-package-版本定义符号"><span>根据 Unity 和项目 Package 版本定义符号</span></a></h2><p>如果你需要根据项目是否使用特定版本的 Unity 或 Package 来编译程序集中的不同代码，你可以向 <strong>Version Defines</strong> 列表添加条目。此列表指定了何时定义符号的规则。对于版本号，你可以指定一个计算结果为特定版本或版本范围的逻辑表达式。</p><ol><li><p>选择程序集定义资产，在 <strong>Inspector</strong> 中查看其属性。</p></li><li><p>在 <strong>Version Defines</strong> 部分，点击 <strong>+</strong> 按钮向列表添加一个条目。</p></li><li><p>设置属性：</p><ul><li><strong>Resource</strong>: 选择 <strong>Unity</strong> 或必须安装的 Package 或 Module，以便定义此符号。</li><li><strong>Define</strong>: 符号名称。</li><li><strong>Expression</strong>: 一个计算结果为特定版本或版本范围的表达式。规则请参阅 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html#version-define-expressions" target="_blank" rel="noopener noreferrer">Version Define Expressions</a>。</li><li><strong>Expression outcome</strong> 显示表达式计算结果为哪些版本。如果结果显示 <strong>Invalid</strong>，则表达式语法不正确。</li></ul><p>以下示例定义了符号 <code>USE_TIMELINE_1_3</code>（如果项目使用 <code>Timeline 1.3</code>）和 <code>USE_NEW_APIS</code>（如果项目在 <code>Unity 2021.2.0a7</code> 或更高版本中打开）：</p><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-8.png" alt=""></p></li><li><p>点击 <strong>Apply</strong>。</p></li></ol><p>在程序集定义中定义的符号仅在该定义创建的程序集中的脚本的作用域内。</p><blockquote><p>即，程序集中定义的符号仅在该程序集内的脚本中生效。</p></blockquote><p>请注意，你可以使用 <strong>Version Defines</strong> 列表定义的符号作为 <strong>Define Constraints</strong>。因此，你可以指定程序集仅在项目中同时安装了给定 Package 的特定版本时才应使用。</p><h3 id="version-define-表达式" tabindex="-1"><a class="header-anchor" href="#version-define-表达式"><span>Version Define 表达式</span></a></h3><p>你可以使用表达式来指定确切的版本或版本范围。<strong>Version Define</strong> 表达式使用数学范围表示法。</p><p>方括号 <code>[]</code> 表示范围包含端点：</p><blockquote><p><code>[1.3,3.4.1]</code> 计算结果为 <code>1.3.0 &lt;= x &lt;= 3.4.1</code></p></blockquote><p>圆括号 <code>()</code> 表示范围排除端点：</p><blockquote><p><code>(1.3.0,3.4)</code> 计算结果为 <code>1.3.0 &lt; x &lt; 3.4.0</code></p></blockquote><p>你可以在单个表达式中混合使用两种范围类型：</p><blockquote><p><code>[1.1,3.4)</code> 计算结果为 <code>1.1.0 &lt;= x &lt; 3.4.0</code></p><p><code>(0.2.4,5.6.2-preview.2]</code> 计算结果为 <code>0.2.4 &lt; x &lt;= 5.6.2.-preview.2</code></p></blockquote><p>你可以使用方括号中的单个版本指示符来指定确切的版本：</p><blockquote><p><code>[2.4.5]</code> 计算结果为 <code>x = 2.4.5</code></p></blockquote><p>作为快捷方式，你可以输入单个版本而不带范围括号，以表示表达式包含该版本或更高版本：</p><blockquote><p><code>2.1.0-preview.7</code> 计算结果为 <code>x &gt;= 2.1.0-preview.7</code></p></blockquote><p><strong>注意：</strong> 表达式中不允许有空格。不支持通配符。</p><h3 id="unity-版本号" tabindex="-1"><a class="header-anchor" href="#unity-版本号"><span>Unity 版本号</span></a></h3><p>当前版本的 Unity（以及所有支持程序集定义的版本）使用包含三个部分的版本指示符：<code>MAJOR.MINOR.REVISION</code>，例如 <code>2017.4.25f1</code>、<code>2018.4.29f1</code> 和 <code>2019.4.7f1</code>。</p><ul><li><code>MAJOR</code> 版本是目标发布年份，例如 2017 或 2021。</li><li><code>MINOR</code> 版本是目标发布季度，例如 1、2、3 或 4。</li><li><code>REVISION</code> 指示符本身有三个部分，格式为：RRzNN，其中： <ul><li><code>RR</code> 是一位或两位数的修订号</li><li><code>z</code> 是指定发布类型的字母： <ul><li><code>a</code> = Alpha 版本</li><li><code>b</code> = 测试(Beta)版本</li><li><code>f</code> = 发布版本</li><li><code>c</code> = 中国发布版本(等同于 f)</li><li><code>p</code> = 补丁(Patch)版本</li><li><code>x</code> = 试验(Experimental)版本</li></ul></li><li><code>NN</code> 是一位或两位数的增量数字</li></ul></li></ul><p>发布类型指示符的比较如下：</p><blockquote><p><code>a &lt; b &lt; f = c &lt; p &lt; x</code></p></blockquote><p>换句话说，<code>Alpha 版本</code> 被认为早于 <code>Beta 版本</code>，后者早于 <code>发布版本</code> 或 <code>中国发布版本</code>。<code>补丁(Patch)版本</code> 总是晚于具有相同修订号的 <code>发布版本</code> 或 <code>中国发布版本</code>，而 <code>试验(Experimental)版本</code> 晚于任何其他发布类型。请注意，<code>试验(Experimental)版本</code> 末尾不使用增量数字。</p><p>Unity 版本号允许在 <code>REVISION</code> 组件后带有后缀，例如 <code>2019.3.0f11-Sunflower</code>。在比较版本时，任何后缀都会被忽略。</p><p>例如，以下表达式包含任何 2017 或 2018 版本的 Unity，但不包含 2019 或更高版本的任何版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[2017,2019)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="package-和-module-版本号" tabindex="-1"><a class="header-anchor" href="#package-和-module-版本号"><span>Package 和 Module 版本号</span></a></h3><p>Package 和 Module 版本指示符有四个部分，遵循 <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a> 格式：<code>MAJOR.MINOR.PATCH-LABEL</code>。前三个部分始终是数字，但 label 是一个字符串。预览中的 Unity packages 使用字符串 <code>preview</code> 或 <code>preview.n</code>，其中 <code>n &gt; 0</code>。有关 package 版本号的更多信息，请参阅 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/upm-semver.html" target="_blank" rel="noopener noreferrer">Package Versioning</a>。</p><p>例如，以下表达式包含 MAJOR.MINOR 版本在 3.2 和 6.1 之间（含）的 package 的所有版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[3.2,6.1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="查找脚本所属的程序集" tabindex="-1"><a class="header-anchor" href="#查找脚本所属的程序集"><span>查找脚本所属的程序集</span></a></h2><p>要识别你的 C# 脚本被编译到哪个程序集中：</p><ol><li>在 <strong>Project</strong> 窗口中选择 C# 脚本文件，在 <strong>Inspector</strong> 窗口中查看其属性。</li><li>程序集文件名和程序集定义（如果存在）显示在 <strong>Inspector</strong> 的 <strong>Assembly Information</strong> 部分。</li></ol><p><img src="https://docs.unity3d.com/2021.3/Documentation/uploads/Main/asmdef-9.png" alt=""></p><p>在此示例中，所选脚本被编译到库文件 <code>Unity.Timeline.Editor.dll</code> 中，该文件由 <code>Unity.Timeline.Editor</code> 程序集定义资产定义。</p><h2 id="特殊文件夹" tabindex="-1"><a class="header-anchor" href="#特殊文件夹"><span>特殊文件夹</span></a></h2><p>Unity 对待某些特殊名称文件夹中的脚本与其他文件夹中的脚本不同。但是，当你在其中一个特殊文件夹内部或其上级文件夹中创建程序集定义资产时，该文件夹会失去其特殊处理。当你使用 Editor 文件夹时，你可能会注意到这种变化，这些文件夹可能散布在你的 Project 中（取决于你如何组织代码以及你使用的 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/AssetStorePackages.html" target="_blank" rel="noopener noreferrer">Asset Store packages</a>）。</p><p>通常，Unity 会将名为 Editor 的文件夹中的所有脚本编译到预定义的 <code>Assembly-CSharp-Editor</code> 程序集中，无论这些脚本位于何处。但是，如果你在一个其下有 Editor 文件夹的文件夹中创建程序集定义资产，Unity 将不再将这些 Editor 脚本放入预定义的 Editor 程序集中。相反，它们会进入由你的程序集定义创建的新程序集中——而它们可能不属于那里。要管理 Editor 文件夹，你可以在每个 Editor 文件夹中创建程序集定义或引用资产，以将这些脚本放入一个或多个 Editor 程序集中。</p><blockquote><p>即，如果你为一个文件夹定义了程序集，如果该文件夹的下级目录存在 Editor 文件夹，该 Editor 文件夹中的编辑器脚本不会被编译到 <code>Assembly-CSharp-Editor</code> 程序集，而是编译到你的程序集，这是不正确的。在创建程序集的时候，应该避免这种错误包含的情况。一般，将 Editor 和 Runtime 分开，且 Editor 文件夹不要放在子目录里。</p></blockquote><h2 id="设置设置程序集属性" tabindex="-1"><a class="header-anchor" href="#设置设置程序集属性"><span>设置设置程序集属性</span></a></h2><p>你可以使用 Assembly Attributes 设置程序集的元数据属性。按照惯例，Assembly Attributes 语句通常放在名为 <code>AssemblyInfo.cs</code> 的文件中。</p><p>例如，以下 Assembly Attributes 指定了一些 <a href="https://learn.microsoft.com/zh-cn/dotnet/standard/assembly/set-attributes" target="_blank" rel="noopener noreferrer">.NET 程序集元数据值</a>、一个 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=netcore-2.0" target="_blank" rel="noopener noreferrer">InternalsVisibleTo</a> 属性（这对于测试很有用），以及 Unity 定义的 <a href="https://docs.unity3d.com/2021.3/Documentation/Manual/ManagedCodeStripping.html#PreserveAttribute" target="_blank" rel="noopener noreferrer">Preserve</a> 属性（影响在构建项目时如何从程序集中移除未使用的代码）：</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Reflection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AssemblyCompany</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bee Corp.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Reflection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AssemblyTitle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bee&#39;s Assembly&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Reflection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AssemblyCopyright</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Copyright 2020.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompilerServices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InternalsVisibleTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UnitTestAssembly&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UnityEngine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Scripting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Preserve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在构建脚本中获取程序集信息" tabindex="-1"><a class="header-anchor" href="#在构建脚本中获取程序集信息"><span>在构建脚本中获取程序集信息</span></a></h2><p>使用 <code>UnityEditor.Compilation</code> 命名空间中的 <code>CompilationPipeline</code> 类来检索为项目构建的所有程序集（包括基于程序集定义资产创建的程序集）的相关信息。</p><p>例如，以下脚本使用 <code>CompilationPipeline</code> 类列出项目中所有的 AssembliesType.Player 程序集：</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnityEditor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnityEditor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Compilation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AssemblyLister</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MenuItem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Tools/List Player Assemblies in Console&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PrintAssemblyNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        UnityEngine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;== Player Assemblies ==&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">playerAssemblies</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            CompilationPipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetAssemblies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">AssembliesType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> assembly</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> playerAssemblies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            UnityEngine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">assembly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://docs.unity3d.com/2022.3/Documentation/ScriptReference/Compilation.AssembliesType.html" target="_blank" rel="noopener noreferrer">AssembliesType</a></p><ul><li><code>Editor</code> 针对编辑器编译的程序集，包括测试程序集。</li><li><code>Player</code> 针对播放器编译的程序集，包括测试程序集。</li><li><code>PlayerWithoutTestAssemblies</code> 针对播放器编译的程序集，不包括测试程序集。</li></ul>`,126)]))}const d=i(a,[["render",l]]),h=JSON.parse('{"path":"/Unity/Optimization/%E7%A8%8B%E5%BA%8F%E9%9B%86.html","title":"程序集","lang":"zh-CN","frontmatter":{"source":"https://docs.unity3d.com/2022.3/Documentation/Manual/ScriptCompilationAssemblyDefinitionFiles.html","article":false,"index":false},"git":{"createdTime":1744972326000,"updatedTime":1747391455000,"contributors":[{"name":"unknown","username":"unknown","email":"chenmengjie@cyou-inc.com","commits":4,"url":"https://github.com/unknown"},{"name":"chenjie","username":"chenjie","email":"1587272470@qq.com","commits":3,"url":"https://github.com/chenjie"}]},"readingTime":{"minutes":18.9,"words":5671},"filePathRelative":"Unity/Optimization/程序集.md","localizedDate":"2025年4月18日","excerpt":""}');export{d as comp,h as data};
