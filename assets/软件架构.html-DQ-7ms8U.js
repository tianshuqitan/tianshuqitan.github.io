import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as o,o as r}from"./app-CcvT9U-c.js";const i="/assets/Unity3D%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1-B5Hp3tFi.png",l="/assets/Unity3D%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A12-DpBh3cAW.png",e="/assets/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1-B2Ru0Mpt.png",g={};function a(p,t){return r(),s("div",null,t[0]||(t[0]=[o('<h1 id="软件架构" tabindex="-1"><a class="header-anchor" href="#软件架构"><span>软件架构</span></a></h1><h2 id="架构的好坏" tabindex="-1"><a class="header-anchor" href="#架构的好坏"><span>架构的好坏</span></a></h2><p>架构的好坏可从以下几个方面进行评估：</p><ul><li><strong>承载力</strong>：一个架构能承载多少个逻辑系统，程序员彼此工作的模块耦合度是否依然能保持原来的设计要求，能够承载多少个程序员共同开发，共同开发的效率又如何。对于服务器来说，当前架构能承受多少人同时访问，能承载的日均访问量是多少。对于客户端来说，能显示多少UI元素，可渲染多少模型（包括同屏渲染和非同屏渲染）。</li><li><strong>可扩展性</strong>：架构能适应不同类型的需求，可添加不同类型的系统、不同功能的子系统。可扩展性的关键在于，是否能在添加新的子系统后不影响或者尽可能少影响其他子系统的运作。</li><li><strong>易用性</strong>：易用性决定了架构的整体开发效率，程序员容易上手，子系统容易对接，开发效率自然就高。精力和注意力都可以集中在子系统的设计和编码上，这才能让各系统各尽其职，将效率发挥到极致。</li><li><strong>可伸缩性</strong>：从客户端的角度，伸缩力体现在是否既能适应大型项目上，如上百人协同开发一个复杂系统，也能适应小项目上，如1～3人小团队的快速开发环境，即小成本小作品的快速迭代。</li><li><strong>容错性以及错误的感知力</strong>：从客户端角度，容错性包括当程序发生错误时，是否同样能够继续保持运行而不崩溃；当这个页面程序出错时，是否依然能够运行其他程序而不闪退或崩溃。同时所有出现的程序错误，都能及时地记录下来并发送到后台，存储为错误日志，便于开发人员及时得到详细的错误信息，能够根据错误信息快速找出问题所在。</li></ul><h2 id="架构中的思维方式" tabindex="-1"><a class="header-anchor" href="#架构中的思维方式"><span>架构中的思维方式</span></a></h2><p>架构设计中最重要的能力是什么，我会毫不犹豫回答是抽象能力。</p><ul><li><strong>分层思维</strong>：构建一套复杂系统时，我们把整个系统划分成若干个层次，每一层专注解决某个领域的问题，并向上提供服务。这样的抽象做法，让复杂的事务变得更加清晰、有序。</li><li><strong>分治思维</strong>：对于一个无法一次解决的大问题，我们先把大问题分解成若干个子问题，如果子问题还无法解决，则继续分解成子子问题，直到可以直接解决为止，这就是分解(divide)的过程；然后将子子问题的解组合成子问题的解，再将子问题的解组合成原问题的解，这就是组合(combine)的过程。</li><li><strong>演化思维</strong>：在软件系统的整个生命周期中，前期的设计和开发大致占三分，在后面的七分时间里，架构师需要根据用户的反馈对架构进行不断的调整。借助用户的反馈和进化的力量，推动架构的持续演进，这就是演化式架构思维。</li></ul><h2 id="unity3d-分层设计" tabindex="-1"><a class="header-anchor" href="#unity3d-分层设计"><span>Unity3D 分层设计</span></a></h2><p><img src="'+i+'" alt=""></p><blockquote><p>架构分层</p></blockquote><p><img src="'+l+'" alt=""></p><blockquote><p>分层后再分治</p></blockquote><p><img src="'+e+'" alt=""></p><blockquote><p>网络层设计</p></blockquote><p>不同游戏类型的需要的模块和层级不同。</p><ul><li>在游戏项目中，最常用的是<strong>数据表</strong>、<strong>网络层</strong>、<strong>UI层</strong>、<strong>常用库</strong>这几个模块。</li><li>如果项目是单机的策略类游戏，可能就没有很多角色上的东西，而多了很多2D动画行为控制上的需求。这时在进行层级划分时，就可以把注意力重点放在<strong>2D动画行为控制</strong>、<strong>UI框架</strong>、<strong>数据管理</strong>、<strong>资源管理</strong>及<strong>AI</strong>上。</li><li>如果项目是以3D人物角色为主的网络游戏，则应有<strong>地形地图</strong>、<strong>角色行为控制</strong>等内容，此外，还需要一套<strong>角色技能</strong>、<strong>特效</strong>、<strong>动画编辑工具</strong>等。</li><li>网络游戏项目前期我们会对网络这块内容进行决策，确定是TCP-Socket、UDP还是Web形式的HTTP。</li><li>3D MMRPG的难度主要集中在了解角色<strong>技能动画</strong>、<strong>AI</strong>、<strong>地图</strong>、<strong>物理模拟</strong>上。</li></ul><p>对各个模块进行分解拆分。</p><ul><li><strong>数据表</strong>：EXL导为二进制文件、JSON或其他格式，读取接口和解析接口的定义。</li><li><strong>UI层</strong>：确定是使用NGUI还是UGUI，并针对界面基类、界面管理、输入事件封装进行选择，且自定义通用组件基类和各类通用组件。</li><li><strong>外部资源管理</strong>：确定是否使用AssetBundle，是否对AssetBundle资源进行分类，是否依赖AssetBundle资源间的关系，是否加载与释放AssetBundle的管理，是否加密AssetBundle。</li><li><strong>AI层</strong>：确定是使用状态机还是行为树或者其他，以及状态机或行为树接口的实现、AI可视化工具、AI扩展接口。</li><li><strong>地形地图</strong>：包括地图是2D的还是3D的，场景编辑器的结构是否需要网络合并，场景内的大小物件区别对待，大地形在游戏里如何显示，是否要划分区块。</li><li><strong>寻路与网格</strong>：确定是使用A星算法还是跳点算法或者其他算法；是使用网格栅格还是三角网格；是使用长距离寻路的解决方案还是地图数据管理。</li><li><strong>常用库</strong>：包括时间函数、数学函数、数字变量加密封装、坐标转换函数、Debug调试工具、各大逻辑系统通用工具等。</li><li><strong>角色行为控制</strong>：包括人物移动处理方案、摄像机的碰撞检测、动画特效编辑器、技能编辑器、行为流的建立。</li><li><strong>2D动画控制</strong>：包括动画组件封装、2D动画的制作流程、2D图合并为图集。</li></ul>',18)]))}const E=n(g,[["render",a]]),d=JSON.parse('{"path":"/Unity/Books/%E4%B8%BB%E7%A8%8B%E6%89%8B%E8%AE%B0/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84.html","title":"第一章：软件架构","lang":"zh-CN","frontmatter":{"title":"第一章：软件架构","article":false,"order":1},"git":{"createdTime":1744277214000,"updatedTime":1744277214000,"contributors":[{"name":"unknown","username":"unknown","email":"chenmengjie@cyou-inc.com","commits":1,"url":"https://github.com/unknown"}]},"readingTime":{"minutes":5.19,"words":1556},"filePathRelative":"Unity/Books/主程手记/软件架构.md","localizedDate":"2025年4月10日","excerpt":""}');export{E as comp,d as data};
